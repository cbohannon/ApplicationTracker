/*
 * This file is generated by jOOQ.
*/
package com.jooq.tables;


import com.jooq.Applications;
import com.jooq.Indexes;
import com.jooq.Keys;
import com.jooq.tables.records.InformationRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Information extends TableImpl<InformationRecord> {

    private static final long serialVersionUID = -720942299;

    /**
     * The reference instance of <code>applications.information</code>
     */
    public static final Information INFORMATION = new Information();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InformationRecord> getRecordType() {
        return InformationRecord.class;
    }

    /**
     * The column <code>applications.information.id</code>.
     */
    public final TableField<InformationRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>applications.information.company</code>.
     */
    public final TableField<InformationRecord, String> COMPANY = createField("company", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>applications.information.position</code>.
     */
    public final TableField<InformationRecord, String> POSITION = createField("position", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>applications.information.location</code>.
     */
    public final TableField<InformationRecord, String> LOCATION = createField("location", org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>applications.information.dateApplied</code>.
     */
    public final TableField<InformationRecord, Date> DATEAPPLIED = createField("dateApplied", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>applications.information.contactName</code>.
     */
    public final TableField<InformationRecord, String> CONTACTNAME = createField("contactName", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>applications.information.contactMethod</code>.
     */
    public final TableField<InformationRecord, String> CONTACTMETHOD = createField("contactMethod", org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>applications.information.contactedMeFirst</code>.
     */
    public final TableField<InformationRecord, String> CONTACTEDMEFIRST = createField("contactedMeFirst", org.jooq.impl.SQLDataType.VARCHAR(3), this, "");

    /**
     * The column <code>applications.information.status</code>.
     */
    public final TableField<InformationRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(6), this, "");

    /**
     * The column <code>applications.information.notes</code>.
     */
    public final TableField<InformationRecord, String> NOTES = createField("notes", org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * Create a <code>applications.information</code> table reference
     */
    public Information() {
        this(DSL.name("information"), null);
    }

    /**
     * Create an aliased <code>applications.information</code> table reference
     */
    public Information(String alias) {
        this(DSL.name(alias), INFORMATION);
    }

    /**
     * Create an aliased <code>applications.information</code> table reference
     */
    public Information(Name alias) {
        this(alias, INFORMATION);
    }

    private Information(Name alias, Table<InformationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Information(Name alias, Table<InformationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Applications.APPLICATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INFORMATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<InformationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INFORMATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InformationRecord> getPrimaryKey() {
        return Keys.KEY_INFORMATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InformationRecord>> getKeys() {
        return Arrays.<UniqueKey<InformationRecord>>asList(Keys.KEY_INFORMATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Information as(String alias) {
        return new Information(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Information as(Name alias) {
        return new Information(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Information rename(String name) {
        return new Information(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Information rename(Name name) {
        return new Information(name, null);
    }
}
